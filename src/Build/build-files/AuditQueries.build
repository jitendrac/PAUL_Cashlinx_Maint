<?xml version="1.0" encoding="utf-8" ?>
<project name="Audit" basedir="." xmlns="http://nant.sf.net/release/0.91-alpha2/nant.xsd">

  <property name="deploy.audit.queries.app.key.update" value="true"/>
  <property name="src.audit.queries.exe.file" value="${src.audit.queries.bin.dir}\${msbuild.param.configuration}\AuditQueries.exe"/>

  <target name="deploy-audit-queries">
    <call target="__ensure.audit.queries.assembly.version"/>
    <call target="__update.audit.queries.app.key"/>
    <call target="__pause.for.audit.queries.application.testing"/>
    <call target="__deploy.audit.queries.to.staging"/>
    <call target="__deploy.audit.queries.to.staging.hash.validation"/>
    <call target="__send.audit.queries.deployment.emails"/>
  </target>

  <target name="dist-audit-queries">
    <echo message="${src.audit.queries.exe.file}"/>
    <call target="__ensure.audit.queries.assembly.version"/>
    <call target="__dist.audit.queries"/>
    <call target="__dist.audit.queries.config.files"/>
    <call target="__generate.audit.queries.hash.list"/>
    <call target="__generate.audit.queries.sql.update.script"/>
  </target>

  <target name="__compress-audit-queries">
    <call target="__ensure.audit.queries.assembly.version"/>
    <property name="dist.audit.queries.zip.file" value="${dist.root.dir}\AuditQueries_Build_${timestamp.suffix}_(${audit.queries.assembly.version}).zip"/>
    <zip zipfile="${dist.audit.queries.zip.file}" includeemptydirs="true">
      <fileset basedir="${dist.build.dir}">
        <include name="**/c/Program Files/AuditQueriesApp/*" />
        <include name="auditqueries_version_script*.txt"/>
        <include name="auditqueries.exe.config*"/>
        <include name="digestAuditQueries_*.txt"/>
      </fileset>
    </zip>
  </target>

  <target name="__create.audit.queries.directory.structure">
    <mkdir dir="${dist.audit.queries.dir}" />
    <mkdir dir="${dist.audit.queries.logs.dir}" />
  </target>

  <target name="__deploy.audit.queries.to.staging">
    <call target="__pause.for.deploy.audit.queries.to.staging"/>
    <if test="${deploy.audit.queries.to.staging}">

      <delete>
        <fileset basedir="${deploy.audit.queries.staging.dir}">
          <include name="**/c/Program Files/AuditQueriesApp/**"/>
          <include name="digestAuditQueries_*.txt"/>
          <include name="AuditQueries.exe.config*"/>
        </fileset>
      </delete>

      <copy todir="${deploy.audit.queries.staging.dir}" includeemptydirs="true" verbose="${verbose}">
        <fileset basedir="${dist.build.dir}">
          <include name="**/c/Program Files/AuditQueriesApp/**"/>
          <include name="digestAuditQueries_*.txt"/>
          <include name="AuditQueries.exe.config*" if="${include.environment.staging}"/>
          <exclude name="**/ldap_details*.log"/>
          <exclude name="**/pawnsec_details*.log"/>
        </fileset>
      </copy>
    </if>
  </target>

  <target name="__deploy.audit.queries.to.staging.hash.validation">
    <call target="__ensure.audit.queries.assembly.version" />
    <md5Validator hashfile="${deploy.audit.queries.staging.dir}\digestAuditQueries_${audit.queries.assembly.version.short}.txt" basepath="${deploy.audit.queries.staging.dir}\c" />
    <if test="${include.environment.staging}">
      <md5Validator hashfile="${deploy.audit.queries.staging.dir}\digestAuditQueries_ENV.txt" basepath="${deploy.audit.queries.staging.dir}" skipextrafilescheck="true" />
    </if>
  </target>

  <target name="__dist.audit.queries">
    <copy todir="${dist.audit.queries.dir}" verbose="${verbose}">
      <fileset basedir="${src.audit.queries.bin.dir}\${msbuild.param.configuration}">
        <!--<include name="**/*."/>-->
        <include name="AuditQueries.exe" />
        <include name="*.dll" />
        <include name="*.resources" />
        <include name="*.xml" />
        <include name="*.pdb" />
        <!--<exclude name="JsonFx.Json.xml"/>-->
      </fileset>
    </copy>

    <configwriter file="${dist.audit.queries.dir}\AuditQueries.exe.config" configkey="${staging.database.key}" application="AuditQueries" />
  </target>

  <target name="__dist.audit.queries.config.files">
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXD" configkey="CLXD" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXD2" configkey="CLXD2" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXD3" configkey="CLXD3" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXI" configkey="CLXI" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXP" configkey="CLXP" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXPG" configkey="CLXPG" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXPP" configkey="CLXPP" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXQ" configkey="CLXQ" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXR2" configkey="CLXR2" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXT" configkey="CLXT" application="AuditQueries" />
    <configwriter file="${dist.build.dir}\AuditQueries.exe.config - CLXT2" configkey="CLXT2" application="AuditQueries" />
  </target>

  <target name="__ensure.audit.queries.assembly.version">
    <if test="${not property::exists('audit.queries.assembly.version')}">
      <call target="__read.audit.queries.assembly.version"/>
    </if>
  </target>

  <target name="__generate.audit.queries.hash.list">
    <call target="__ensure.audit.queries.assembly.version"/>
    <property name="dist.output.hashlist.file" value="${dist.build.dir}\digestAuditQueries_${audit.queries.assembly.version.short}.txt"/>
    <property name="dist.config.hashlist.file" value="${dist.build.dir}\digestAuditQueries_ENV.txt"/>
    <writefile file="${dist.output.hashlist.file}" value="${Cashlinx::GenerateHashFileList(dist.audit.queries.dir, dist.build.dir + '\c\', '*.*', true)}"/>
    <if test="${include.environment.staging}">
      <writefile file="${dist.config.hashlist.file}" value="${Cashlinx::GenerateHashFileList(dist.build.dir, dist.build.dir + '\','AuditQueries.exe.config*', false)}"/>
    </if>
  </target>

  <target name="__generate.audit.queries.sql.update.script">
    <call target="__ensure.audit.queries.assembly.version"/>
    <loadfile file="${version_template.sql.file}" property="version_template.sql" />

    <property name="version_template.sql" value="${string::replace(version_template.sql, '[APPID]', 4)}" />
    <property name="version_template.sql" value="${string::replace(version_template.sql, '[DESCRIPTION]', 'Audit Queries')}" />
    <property name="version_template.sql" value="${string::replace(version_template.sql, '[APPVERSION]', audit.queries.assembly.version)}" />
    <property name="version_template.sql" value="${string::replace(version_template.sql, '[APPVERSIONHASH]', audit.queries.assembly.version.hash)}" />
    <property name="version_template.sql" value="${string::replace(version_template.sql, '[TIMESTAMP]', Cashlinx::FormatDateTime(datetime::now(), 'M/d/yyyy h:mm:ss.000000 tt -05:00'))}" />

    <writefile file="${dist.audit.queries.sql.update.script.file}" value="${version_template.sql}" />

    <echo message="Audit Queries Sql update script generated"/>
  </target>

  <target name="__read.audit.queries.assembly.version">
    <property name="audit.queries.assembly.version" value="${assemblyname::get-version(assemblyname::get-assembly-name(src.audit.queries.exe.file))}"/>
    <property name="audit.queries.assembly.version.hash" value="${Cashlinx::GenerateHash(audit.queries.assembly.version)}"/>
    <property name="audit.queries.assembly.version.short" value="${string::substring(audit.queries.assembly.version,0,string::last-index-of(audit.queries.assembly.version, '.'))}"/>

    <property name="dist.audit.queries.sql.update.script.file" value="${dist.build.dir}\auditqueries_version_script_${audit.queries.assembly.version.short}.sql"/>

    <echo message="Audit Queries Assembly version: ${audit.queries.assembly.version}"/>
    <echo message="Audit Queries Assembly version short: ${audit.queries.assembly.version.short}"/>
    <echo message="Audit Queries Assembly version hash: ${audit.queries.assembly.version.hash}"/>
  </target>

  <target name="__email.audit.queries.update.branches">
    <call target="__ensure.audit.queries.assembly.version"/>
    <property name="email.from" value="${user.email.address}"/>

    <property name="email.to" value="${update.branch.email.list.to}" />
    <property name="email.cc" value="${udpate.branch.email.list.cc}"/>

    <if test="${dev.mode}">
      <property name="email.to" value="${user.email.address}"/>
      <property name="email.cc" value=""/>
    </if>

    <mail
      from="${email.from}"
      tolist="${email.to}"
      cclist="${email.cc}"
      subject="Update work branches for Audit Queries ${audit.queries.assembly.version.short}"
      mailhost="mail.casham.com"
      message="All,&lt;br/&gt;&lt;br/&gt;Please update your work branches to pick up the latest app key changes for Audit Queries ${audit.queries.assembly.version.short}.&lt;br/&gt;&lt;br/&gt;Thanks,&lt;br/&gt;${user.full.name}"
      format="Html">
    </mail>
  </target>

  <target name="__email.audit.queries.staging.updated">
    <call target="__ensure.audit.queries.assembly.version"/>
    <property name="email.from" value="${user.email.address}"/>

    <property name="email.to" value="${staging.email.list.to}"/>
        <property name="email.cc" value="${user.email.address}"/>

    <if test="${dev.mode}">
      <property name="email.to" value="${user.email.address}"/>
      <property name="email.cc" value=""/>
    </if>

    <echo message="${dist.audit.queries.sql.update.script.file}"/>

    <mail
      from="${email.from}"
      tolist="${email.to}"
      cclist="${email.cc}"
      subject="${audit.queries.assembly.version.short} Staging"
      mailhost="mail.casham.com"
      message="Jake/Lance,&lt;br/&gt;&lt;br/&gt;The build for Audit Queries ${audit.queries.assembly.version.short} has been copied to the staging area and ${dev.database.key} has been updated to reflect the latest app key.&lt;br/&gt;&lt;br/&gt;Thanks,&lt;br/&gt;${user.full.name}"
      format="Html">
      <attachments basedir=".">
        <include name="${dist.audit.queries.sql.update.script.file}"/>
      </attachments>
    </mail>
  </target>

  <target name="__update.audit.queries.app.key">
    <call target="__pause.for.audit.queries.sql.update"/>

    <if test="${deploy.audit.queries.app.key.update}">
      <appkeyupdate sqlfilename="${dist.audit.queries.sql.update.script.file}" configkey="${dev.database.key}"></appkeyupdate>
    </if>
  </target>

  <target name="__print.merge.instructions">
    <echo message="Merging Instructions"></echo>
    <echo/>
    <echo message="    Now you need to update binaries_staged.7z in devint/bin"></echo>
    <echo/>
    <echo message="    Now you need to merge the code up using the following branch mappings"></echo>
    <echo/>
    <echo message="    1.  DevIntToDevWork"></echo>
    <echo message="    2.  ReleaseToNewDevIntBranch"></echo>
    <echo message="    3.  ReleaseToNewDevIntBinary"></echo>
    <echo message="    4.  MainToReleaseBranch"></echo>
    <echo message="    5.  MainToReleaseBinary"></echo>
    <echo message="    6.  MainToProdBranch"></echo>
    <echo message="    7.  MainToProdBinary"/>
  </target>

  <target name="__pause.for.deploy.audit.queries.to.staging">
    <property name="pause.deploy.audit.queries.to.staging.successful" value="null"/>
    <input
      forceuppercase="true"
      prompt="Do you wish to copy this build to the staging area?  If so, make sure you have an explorer window open and browse to ${deploy.audit.queries.staging.dir}.  Press 'Y' to continue or 'N' to skip"
      property="pause.deploy.audit.queries.to.staging.successful"
      validentries="Y,N">
    </input>
    <if test="${pause.deploy.audit.queries.to.staging.successful=='Y'}">
      <property name="deploy.audit.queries.to.staging" value="true"/>
    </if>
    <if test="${pause.deploy.audit.queries.to.staging.successful=='N'}">
      <property name="deploy.audit.queries.to.staging" value="false"/>
    </if>
  </target>

  <target name="__pause.for.audit.queries.email.question">
    <property name="pause.audit.queries.email.question.successful" value="null"/>
    <input
      forceuppercase="true"
      prompt="Do you wish to send emails during this Audit Queries deployment?  Press 'Y' to continue or 'N' to skip"
      property="pause.audit.queries.email.question.successful"
      validentries="Y,N">
    </input>
    <if test="${pause.audit.queries.email.question.successful=='Y'}">
      <property name="deploy.audit.queries.send.emails" value="true"/>
    </if>
    <if test="${pause.audit.queries.email.question.successful=='N'}">
      <property name="deploy.audit.queries.send.emails" value="false"/>
    </if>
  </target>

  <target name="__pause.for.audit.queries.sql.update">
    <property name="pause.audit.queries.sql.update.successful" value="null"/>
    <input
      forceuppercase="true"
      prompt="Do you want to update ${dev.database.key} with the latest Audit Queries app key?  Press 'Y' to continue or 'N' to skip"
      property="pause.audit.queries.sql.update.successful"
      validentries="Y,N">
    </input>
    <if test="${pause.audit.queries.sql.update.successful=='Y'}">
      <property name="deploy.audit.queries.app.key.update" value="true"/>
    </if>
    <if test="${pause.audit.queries.sql.update.successful=='N'}">
      <property name="deploy.audit.queries.app.key.update" value="false"/>
    </if>
  </target>

  <target name="__pause.for.audit.queries.application.testing">
    <exec
      program="${dist.audit.queries.dir}\AuditQueries.exe"
      workingdir="${dist.audit.queries.dir}"
      commandline='"${dist.build.dir}\AuditConfig.exe.config - ${dev.database.key}"' ></exec>

    <property name="pause.audit.queries.application.testing.successful" value="null"/>
    <input
      forceuppercase="true"
      prompt="Verify the Audit Queries application runs correctly and press 'Y' to continue or 'N' to fail the build"
      property="pause.audit.queries.application.testing.successful"
      validentries="Y,N">
    </input>
    <if test="${pause.audit.queries.application.testing.successful!='Y'}">
      <fail message="The build has failed due to a failed application test."/>
    </if>

  </target>

  <target name="__send.audit.queries.deployment.emails">
    <call target="__pause.for.audit.queries.email.question"/>

    <if test="${deploy.audit.queries.send.emails}">
      <call target="__email.audit.queries.staging.updated"/>
      <call target="__email.audit.queries.update.branches"/>
    </if>
  </target>
</project>