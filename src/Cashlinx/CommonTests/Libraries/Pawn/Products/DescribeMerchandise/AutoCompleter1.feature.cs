// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17626
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CommonTests.Libraries.Pawn.Products.DescribeMerchandise
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Type ahead text box")]
    public partial class TypeAheadTextBoxFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AutoCompleter.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Type ahead text box", "In order to provide a better user experience\r\nAs a user\r\nI want to be able to ent" +
                    "er data quickly into a text field", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Typed three letters")]
        [NUnit.Framework.TestCaseAttribute("ya", "m", "Yamaha", new string[0])]
        public virtual void TypedThreeLetters(string first_Two_Chars, string third_Char, string autocomplete_Suggestion, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Typed three letters", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("I have entered {0}", first_Two_Chars));
#line 8
 testRunner.When(string.Format("I press {0}", third_Char));
#line 9
 testRunner.Then(string.Format("the autocomplete suggestions should include {0}", autocomplete_Suggestion));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Typed two letters")]
        [NUnit.Framework.TestCaseAttribute("y", "a", new string[0])]
        public virtual void TypedTwoLetters(string first_Two_Chars, string third_Char, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Typed two letters", exampleTags);
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have entered <first_char>");
#line 16
 testRunner.When("I press <second_char>");
#line 17
 testRunner.Then("the autocomplete suggestions should be empty");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("More than one answer")]
        [NUnit.Framework.TestCaseAttribute("yam", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("glp", "0", new string[0])]
        public virtual void MoreThanOneAnswer(string three_Chars, string n, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("More than one answer", exampleTags);
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given(string.Format("I have entered {0}", three_Chars));
#line 24
 testRunner.Then(string.Format("there should be {0} autocomplete suggestions", n));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Functionality capture")]
        public virtual void FunctionalityCapture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Functionality capture", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("a find box");
#line 32
 testRunner.And("a refactored find box");
#line 33
 testRunner.When("I enter every permutation of 3 characters");
#line 34
 testRunner.Then("the autocomplete suggestions should be the same");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
