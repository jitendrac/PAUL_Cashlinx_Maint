<?xml version="1.0" encoding="utf-8" ?>
<project name="CashlinxDesktop" default="usage" basedir="." xmlns="http://nant.sf.net/release/0.91-alpha2/nant.xsd">

  <property name="nant.app.dir" value="${nant::get-base-directory()}" />
  <property name="cashlinx.build.tasks.file" value="Cashlinx.Build.Tasks.dll"/>
  <property name="cashlinx.build.tasks.path" value="..\build\${cashlinx.build.tasks.file}"/>
  <property name="cashlinx.unit.tests.results.file" value="cashlinx.unit.tests.results.xml" />
  <property name="cashlinx.unit.tests.coverage.file" value="cashlinx.unit.tests.coverage.xml" />
  <property name="cashlinx.unit.tests.coverage.summary.file" value="cashlinx.unit.tests.coverage.summary.xml" />

  <if test="${not file::exists(cashlinx.build.tasks.path)}">
    <fail message="Missing ${cashlinx.build.tasks.path}"/>
  </if>

  <loadtasks assembly="${cashlinx.build.tasks.path}" />

  <environmentloader nantappdirectory="${nant.app.dir}" distrootparent="C:\tmp\Cashlinx"/>

  <loadtasks assembly="${nant.contrib.app.dir}\NAnt.Contrib.Tasks.dll" />

  <if test="${deployment.type == 'Unknown'}">
    <fail message="Unknown deployment type"/>
  </if>
  
  <property name="timestamp.suffix" value="${Cashlinx::FormatDateTime(datetime::now(), 'yyyyMMdd_HHmmss')}"/>

  <property name="msbuild.param.buildfile.dir" value="" />
  <property name="msbuild.param.buildfile.name" value="" />
  <property name="msbuild.param.target" value="" />

  <property name="secure.tasks.password" value=""/>

  <property name="user.full.name" value="${Cashlinx::GetUserFullName()}"/>
  <property name="user.email.address" value="${Cashlinx::GetUserEmailAddress()}"/>

  <if test="${deployment.type == 'NewDev'}">
    <property name="dev.database.key" value="CLXD3"/>
    <property name="staging.database.key" value="CLXT2"/>
  </if>
  <if test="${deployment.type == 'MaintDev'}">
    <property name="dev.database.key" value="CLXI"/>
    <property name="staging.database.key" value="CLXT"/>
  </if>
  
  <property name="include.environment.staging" value="true"/>

  <if test="${not property::exists('msbuild.param.configuration')}">
    <property name="msbuild.param.configuration" value="Release" />
  </if>

  <if test="${not property::exists('verbose')}">
    <property name="verbose" value="false" />
  </if>

  <if test="${not property::exists('msbuild.verbosity')}">
    <!-- The available verbosity levels are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic]. -->
    <property name="msbuild.verbosity" value="q" />
  </if>

  <if test="${not property::exists('msbuild.param.platform')}">
    <property name="msbuild.param.platform" value="x86" />
  </if>

  <fileset id="solutions.fileset" basedir=".">
    <include name="./Cashlinx.sln" />
  </fileset>

  <target name="build">
    <if test="${msbuild.param.configuration == 'Release'}">
      <call target="build-release"/>
    </if>
    <if test="${msbuild.param.configuration == 'Debug'}">
      <call target="build-debug"/>
    </if>
  </target>

  <target name="build-debug" depends="__create.directory.structure">
    <property name="msbuild.param.configuration" value="Debug" />
    <property name="msbuild.param.target" value="" />
    <call target="__execute-msbuild" />
  </target>

  <target name="build-release" depends="__create.directory.structure">
    <property name="msbuild.param.configuration" value="Release" />
    <property name="msbuild.param.target" value="" />
    <call target="__execute-msbuild" />
  </target>

  <target name="clean">
    <if test="${msbuild.param.configuration == 'Release'}">
      <call target="clean-release"/>
    </if>
    <if test="${msbuild.param.configuration == 'Debug'}">
      <call target="clean-debug"/>
    </if>
  </target>

  <target name="clean-debug">
    <property name="msbuild.param.configuration" value="Debug" />
    <property name="msbuild.param.target" value=":Clean" />
    <call target="__clean-test-results" />
    <call target="__execute-msbuild" />
  </target>

  <target name="clean-release">
    <property name="msbuild.param.configuration" value="Release" />
    <property name="msbuild.param.target" value=":Clean" />
    <call target="__clean-test-results" />
    <call target="__execute-msbuild" />
  </target>

  <target name="clean-tmp">
    <fileset id="old-files" basedir="${dist.root.dir}">
      <exclude name="Build/**" />
      <exclude name="Results/**" />
      <include name="*/**" />
    </fileset>

    <foreach item="File" property="filename">
      <in>
        <items refid="old-files" />
      </in>
      <do>
        <if test="${timespan::get-days(datetime::now() - file::get-last-write-time(filename)) >= 30}">
          <delete file="${filename}" />
        </if>
      </do>
    </foreach>
  </target>

  <target name="compress">
    <nant buildfile="${buildfile.pawn}" target="__compress-pawn" if="${buildfile.pawn.exists}"/>
    <nant buildfile="${buildfile.audit}" target="__compress-audit" if="${buildfile.audit.exists}"/>
    <nant buildfile="${buildfile.audit.queries}" target="__compress-audit-queries" if="${buildfile.audit.queries.exists}"/>
    <nant buildfile="${buildfile.dstr.viewer}" target="__compress-dstr-viewer" if="${buildfile.dstr.viewer.exists}"/>
    <nant buildfile="${buildfile.support}" target="__compress-support" if="${buildfile.support.exists}"/>
  </target>

  <target name="deploy-audit">
    <if test="${buildfile.audit.exists}">
      <call target="__validate.secure.password" />
      <nant buildfile="${buildfile.audit}" target="deploy-audit"/>
      <nant buildfile="${buildfile.audit}" target="__print.merge.instructions"/>
    </if>
  </target>

  <target name="deploy-audit-queries">
    <if test="${buildfile.audit.queries.exists}">
      <call target="__validate.secure.password" />
      <nant buildfile="${buildfile.audit.queries}" target="deploy-audit-queries"/>
      <nant buildfile="${buildfile.audit.queries}" target="__print.merge.instructions"/>
    </if>
  </target>

  <target name="deploy-dstr-viewer">
    <if test="${buildfile.dstr.viewer.exists}">
      <call target="__validate.secure.password" />
      <nant buildfile="${buildfile.dstr.viewer}" target="deploy-dstr-viewer"/>
      <nant buildfile="${buildfile.dstr.viewer}" target="__print.merge.instructions"/>
    </if>
  </target>

  <target name="deploy-pawn">
    <if test="${buildfile.pawn.exists}">
      <call target="__validate.secure.password" />
      <nant buildfile="${buildfile.pawn}" target="deploy-pawn"/>
      <nant buildfile="${buildfile.pawn}" target="__print.merge.instructions"/>
    </if>
  </target>

  <target name="deploy-support">
    <if test="${buildfile.support.exists}">
      <call target="__validate.secure.password" />
      <nant buildfile="${buildfile.support}" target="deploy-support"/>
      <nant buildfile="${buildfile.support}" target="__print.merge.instructions"/>
    </if>
  </target>

  <target name="dist" depends="__clean-dist">
    <nant buildfile="${buildfile.pawn}" target="dist-pawn" if="${buildfile.pawn.exists}"></nant>
    <nant buildfile="${buildfile.audit}" target="dist-audit" if="${buildfile.audit.exists}"></nant>
    <nant buildfile="${buildfile.audit.queries}" target="dist-audit-queries" if="${buildfile.audit.queries.exists}"></nant>
    <nant buildfile="${buildfile.dstr.viewer}" target="dist-dstr-viewer" if="${buildfile.dstr.viewer.exists}"></nant>
    <nant buildfile="${buildfile.support}" target="dist-support" if="${buildfile.support.exists}"></nant>
  </target>

  <target name="full-build">
    <!--<call target="update"/>-->
    <call target="clean"/>
    <call target="build"/>
    <call target="test"/>
    <call target="dist"/>
    <call target="compress"/>
    <call target="clean-tmp"/>
  </target>

  <target name="coverage-debug">
    <property name="msbuild.param.configuration" value="Debug" />
    <call target="clean"/>
    <call target="build"/>
    <call target="test"/>

    <exec program="cmd">
      <arg value='/c "${dist.results.dir}\html\index.htm"' />
    </exec>
  </target>

  <target name="coverage-release">
    <property name="msbuild.param.configuration" value="Release" />
    <call target="clean"/>
    <call target="build"/>
    <call target="test"/>

    <exec program="cmd">
      <arg value='/c "${dist.results.dir}\html\index.htm"' />
    </exec>
  </target>

  <target name="setup-handoff-build">
    <property name="deploy.audit.staging.dir" value="\\fsc.casham.com\new_pos$\QA-CLXD3 P2App Files" />
    <property name="deploy.audit.queries.staging.dir" value="\\fsc.casham.com\new_pos$\QA-CLXD3 P2App Files" />
    <property name="deploy.dstr.viewer.staging.dir" value="\\fsc.casham.com\new_pos$\QA-CLXD3 P2App Files" />
    <property name="deploy.pawn.staging.dir" value="\\fsc.casham.com\new_pos$\QA-CLXD3 P2App Files" />
    <property name="deploy.support.staging.dir" value="\\fsc.casham.com\new_pos$\QA-CLXD3 P2App Files" />
    <property name="staging.database.key" value="CLXD3" />
    <property name="include.environment.staging" value="false" />
  </target>

  <target name="test">
    <property name="thirdparty.nunit.exe.path" value="${thirdparty.nunit.basedir}\nunit-console-x86.exe" />

    <exec
      workingdir="${dist.results.dir}"
      program="${path::get-full-path(thirdparty.nunit.exe.path)}">
      <arg value='"${src.p2app.dir}\Cashlinx.nunit"' />
      <arg value='"/noshadow"' />
      <arg value='"/config=${msbuild.param.configuration}"' />
      <arg line='/xml "${cashlinx.unit.tests.results.file}"' />
    </exec>
    
    <!--<exec
      workingdir="${dist.results.dir}"
      program="${directory::get-parent-directory(thirdparty.nunit.basedir)}\opencover\OpenCover.Console.exe">
      <arg value='-target:"${path::get-full-path(thirdparty.nunit.exe.path)}"' />
      <arg value='-returntargetcode' />
      <arg value='-targetargs:"${src.p2app.dir}\Cashlinx.nunit /noshadow /config=${msbuild.param.configuration} /xml ${cashlinx.unit.tests.results.file}"' />
      <arg value='-filter:"+[Pawn*]* +[Common*]Common* -[Pawn*]Pawn.Forms* -[Pawn*]CashlinxDesktop.UserControls* -[Common*]Common.Libraries.Forms* -[Common*]Common.AddressService* -[Common*]Common.ProKnowService* -[Common*]Common.TransferService* -[PawnTests*]* -[CommonTests*]*"' />
      <arg value='-output:${cashlinx.unit.tests.coverage.file}' />
    </exec>

    <exec
      workingdir="${dist.results.dir}"
      program="${directory::get-parent-directory(thirdparty.nunit.basedir)}\reportgenerator\ReportGenerator.exe" output="${dist.results.dir}\suppressed-output.txt"  >
      <arg value="${cashlinx.unit.tests.coverage.file}" />
      <arg value="${dist.results.dir}\" />
      <arg value="xmlsummary" />
    </exec>

    <exec
      workingdir="${dist.results.dir}"
      program="${directory::get-parent-directory(thirdparty.nunit.basedir)}\reportgenerator\ReportGenerator.exe" output="${dist.results.dir}\suppressed-output.txt"  >
      <arg value="${cashlinx.unit.tests.coverage.file}" />
      <arg value="${dist.results.dir}\html\" />
      <arg value="html" />
    </exec>

    <move file="${dist.results.dir}\summary.xml" tofile="${dist.results.dir}\${cashlinx.unit.tests.coverage.summary.file}" />
    <delete file="${dist.results.dir}\suppressed-output.txt" />-->
    
  </target>

  <target name="update">
    <p4sync verbose="${verbose}" client="${p4.client.name}" />
  </target>

  <target name="usage">
    <echo/>
    <echo message="Usage:" />
    <echo message="    nant task1 [task2] [task3] [task4]..." />
    <echo/>
    <echo message="Usage: (DevMode)" />
    <echo message="    nant -D:devmode=true task1 [task2] [task3] [task4]..." />
    <echo/>
    <echo message="Available tasks:" />
    <echo message="    clean" />
    <echo message="    clean-debug" />
    <echo message="    clean-release" />
    <echo message="    clean-tmp" />
    <echo message="    compress" />
    <echo message="    coverage-debug" />
    <echo message="    coverage-release" />
    <echo message="    build" />
    <echo message="    build-debug" />
    <echo message="    build-release" />
    <echo message="    deploy-audit (Password Required)"/>
    <echo message="    deploy-audit-queries (Password Required)"/>
    <echo message="    deploy-dstr-viewer (Password Required)"/>
    <echo message="    deploy-pawn (Password Required)"/>
    <echo message="    deploy-support (Password Required)"/>
    <echo message="    dist" />
    <echo message="    full-build (clean, build, test, dist, compress, clean-tmp)" />
    <echo message="    setup-handoff-build" />
    <echo message="    test" />
    <echo message="    update" />
    <echo message="    write-packages" />
    <echo/>
    <echo message="To manually set perforce workspace:"/>
    <echo message="    -D:p4.client.name=[VALUE]"/>
    <echo message="    Possible values:"/>
    <echo/>
    <echo message="To manually set deployment type:"/>
    <echo message="    -D:deployment.type=[VALUE]"/>
    <echo message="    Possible values:"/>
    <echo message="        NewDev"/>
    <echo message="        MaintDev"/>
    <echo/>
  </target>

  <target name="write-packages">
    <delete verbose="${verbose}">
      <fileset basedir="${dist.root.dir}">
        <include name="Oracle/Packages/*/**" />
      </fileset>
    </delete>

    <packagewriter configkey="${dev.database.key}" outputdirectory="${dist.oracle.packages.dir}" />

    <property name="dist.oracle.package.zip.file" value="${dist.oracle.dir}\Oracle_Packages_${timestamp.suffix}.zip"/>
    <zip zipfile="${dist.oracle.package.zip.file}" includeemptydirs="true">
      <fileset basedir="${dist.oracle.packages.dir}">
        <include name="**/*" />
      </fileset>
    </zip>
  </target>

  <target name="__clean-dist">
    <delete verbose="${verbose}">
      <fileset basedir="${dist.root.dir}">
        <include name="Build/CashlinxDesktop/*" />
        <include name="Build/**" />
        <include name="Oracle/Packages/*/**" />
      </fileset>
    </delete>

    <call target="__create.directory.structure" />
  </target>

  <target name="__clean-test-results">
    <!--<nant buildfile="${buildfile.common}" target="__clean-common-test-results"></nant>
    <nant buldfile="${buildfile.pawn}" target="__clean-pawn-test-results"></nant>-->

    <delete verbose="${verbose}">
      <fileset basedir="${dist.root.dir}/Results">
        <include name="*.*" />
      </fileset>
    </delete>
    
  </target>

  <target name="__create.directory.structure">
    <mkdir dir="${dist.build.dir}"/>
    <mkdir dir="${dist.results.dir}"/>

    <nant buildfile="${buildfile.pawn}" target="__create.pawn.directory.structure" if="${buildfile.pawn.exists}"></nant>
    <nant buildfile="${buildfile.audit}" target="__create.audit.directory.structure" if="${buildfile.audit.exists}"></nant>
    <nant buildfile="${buildfile.audit.queries}" target="__create.audit.queries.directory.structure" if="${buildfile.audit.queries.exists}"></nant>
    <nant buildfile="${buildfile.support}" target="__create.support.directory.structure" if="${buildfile.support.exists}"></nant>
    <nant buildfile="${buildfile.dstr.viewer}" target="__create.dstr.viewer.directory.structure" if="${buildfile.dstr.viewer.exists}"></nant>
  </target>

  <target name="__execute-msbuild">

    <foreach item="File" property="buildfile">
      <in>
        <items refid="solutions.fileset" />
      </in>
      <do>
        <property name="msbuild.param.buildfile.dir" value="${path::get-directory-name(buildfile)}" />
        <property name="msbuild.param.buildfile.name" value="${path::get-file-name(buildfile)}" />
        <echo />
        <echo message="Auto-building ${buildfile}..." />
        <echo />
        <exec workingdir="${msbuild.param.buildfile.dir}" program="msbuild" verbose="${verbose}">
          <arg value="${msbuild.param.buildfile.name}" />
          <arg value="/t:Audit\Audit${msbuild.param.target};Pawn\Pawn${msbuild.param.target};Common\CommonTests${msbuild.param.target};Pawn\PawnTests${msbuild.param.target};AuditQueries\AuditQueries${msbuild.param.target};Tools\DSTRViewer${msbuild.param.target}" />
          <arg value="/p:Configuration=${msbuild.param.configuration}" />
          <arg value="/p:Platform=${msbuild.param.platform}" />
          <arg value="/p:WarningLevel=0" />
          <arg value="/v:${msbuild.verbosity}" />
        </exec>
      </do>
    </foreach>

  </target>

  <target name="__validate.secure.password">
    <property name="secure.tasks.password.matched" value="false" />
    <while property="secure.tasks.password.matched" notequals="true">
      <do>
        <input prompt="Password" passwordmode="true" property="secure.tasks.password"></input>
        <if test="${Cashlinx::MatchesDeployPassword(secure.tasks.password)}">
          <property name="secure.tasks.password.matched" value="true" />
        </if>
      </do>
    </while>
  </target>

</project>